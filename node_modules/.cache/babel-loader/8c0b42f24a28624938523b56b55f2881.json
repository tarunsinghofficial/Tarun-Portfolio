{"ast":null,"code":"/**\n * lucide-react v0.284.0 - ISC\n */\nimport { forwardRef, createElement } from 'react';\nimport defaultAttributes from './defaultAttributes.js';\n\nconst toKebabCase = string => string.replace(/([a-z0-9])([A-Z])/g, \"$1-$2\").toLowerCase();\n\nconst createLucideIcon = (iconName, iconNode) => {\n  const Component = forwardRef((_ref, ref) => {\n    let {\n      color = \"currentColor\",\n      size = 24,\n      strokeWidth = 2,\n      absoluteStrokeWidth,\n      children,\n      ...rest\n    } = _ref;\n    return createElement(\"svg\", {\n      ref,\n      ...defaultAttributes,\n      width: size,\n      height: size,\n      stroke: color,\n      strokeWidth: absoluteStrokeWidth ? Number(strokeWidth) * 24 / Number(size) : strokeWidth,\n      className: `lucide lucide-${toKebabCase(iconName)}`,\n      ...rest\n    }, [...iconNode.map(_ref2 => {\n      let [tag, attrs] = _ref2;\n      return createElement(tag, attrs);\n    }), ...((Array.isArray(children) ? children : [children]) || [])]);\n  });\n  Component.displayName = `${iconName}`;\n  return Component;\n};\n\nexport { createLucideIcon as default, toKebabCase };","map":{"version":3,"mappings":";;;;;;AAsBa,oBAAeA,MAAD,IAAoBA,OAAOC,OAAP,CAAe,oBAAf,EAAqC,OAArC,EAA8CC,WAA9C,EAAlC;;AAEP,yBAAmB,CAACC,QAAD,EAAmBC,QAAnB,KAAsD;EAC7E,MAAMC,SAAY,cAChB,OAAiGC,GAAjG;IAAA,IAAC;MAAEC,KAAQ,iBAAV;MAA0BC,IAAO,KAAjC;MAAqCC,WAAc,IAAnD;MAAsDC,mBAAtD;MAA2EC,QAA3E;MAA2E,GAAaC;IAAxF,CAAD;IAAA,OACEC,cACE,KADF,EAEE;MACEP,GADF;MAEE,GAAGQ,iBAFL;MAGEC,KAAO,MAHT;MAIEC,MAAQ,MAJV;MAKEC,MAAQ,OALV;MAMER,aAAaC,sBAAsBQ,MAAO,aAAP,GAAsB,EAAtB,GAA2BA,OAAOV,IAAP,CAAjD,GAAgEC,WAN/E;MAOEU,WAA4B,6BAAYhB,QAAZ,CAAoB,EAPlD;MAQE,GAAGS;IARL,CAFF,EAYE,CACE,GAAGR,QAAS,IAAT,CAAa;MAAA,IAAC,CAACgB,GAAD,EAAMC,KAAN,CAAD;MAAA,OAAkBR,cAAcO,GAAd,EAAmBC,KAAnB,CAAlB;IAAA,CAAb,CADL,EAEE,KACGC,MAAMC,OAAN,CAAcZ,QAAd,IAA0BA,QAA1B,GAAqC,CAACA,QAAD,CADxC,KACuD,EADvD,CAFF,CAZF,CADF;EAAA,CADgB,CAAlB;EAuBAN,UAAUmB,WAAV,GAA2B,aAA3B;EAEO;AACT,CA3BM","names":["string","replace","toLowerCase","iconName","iconNode","Component","ref","color","size","strokeWidth","absoluteStrokeWidth","children","rest","createElement","defaultAttributes","width","height","stroke","Number","className","tag","attrs","Array","isArray","displayName"],"sources":["C:\\Users\\tarun\\Mern\\React\\learn-basics\\node_modules\\lucide-react\\src\\createLucideIcon.ts"],"sourcesContent":["import { forwardRef, createElement, ReactSVG, SVGProps, ForwardRefExoticComponent, RefAttributes } from 'react';\nimport defaultAttributes from './defaultAttributes';\n\nexport type IconNode = [elementName: keyof ReactSVG, attrs: Record<string, string>][]\n\nexport type SVGAttributes = Partial<SVGProps<SVGSVGElement>>\ntype ComponentAttributes = RefAttributes<SVGSVGElement> & SVGAttributes\n\nexport interface LucideProps extends ComponentAttributes {\n  size?: string | number\n  absoluteStrokeWidth?: boolean\n}\n\nexport type LucideIcon = ForwardRefExoticComponent<LucideProps>;\n/**\n * Converts string to KebabCase\n * Copied from scripts/helper. If anyone knows how to properly import it here\n * then please fix it.\n *\n * @param {string} string\n * @returns {string} A kebabized string\n */\nexport const toKebabCase = (string: string) => string.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();\n\nconst createLucideIcon = (iconName: string, iconNode: IconNode): LucideIcon => {\n  const Component = forwardRef<SVGSVGElement, LucideProps>(\n    ({ color = 'currentColor', size = 24, strokeWidth = 2, absoluteStrokeWidth, children, ...rest }, ref) =>\n      createElement(\n        'svg',\n        {\n          ref,\n          ...defaultAttributes,\n          width: size,\n          height: size,\n          stroke: color,\n          strokeWidth: absoluteStrokeWidth ? Number(strokeWidth) * 24 / Number(size) : strokeWidth,\n          className: `lucide lucide-${toKebabCase(iconName)}`,\n          ...rest,\n        },\n        [\n          ...iconNode.map(([tag, attrs]) => createElement(tag, attrs)),\n          ...(\n            (Array.isArray(children) ? children : [children]) || []\n          )\n        ],\n      ),\n  );\n\n  Component.displayName = `${iconName}`;\n\n  return Component;\n};\n\nexport default createLucideIcon\n"]},"metadata":{},"sourceType":"module"}